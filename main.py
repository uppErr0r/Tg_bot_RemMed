import telebot
import datetime
import time
import threading
import random

# Замените 'YOUR_BOT_TOKEN' на токен, полученный от BotFather
bot_token = 'YOUR_BOT_TOKEN'
bot = telebot.TeleBot(bot_token)

# Хранилище времени напоминаний для каждого пользователя
user_reminders = {}

# Обработчик сообщений, содержащих команду '/start'
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, "Привет! Я простой бот который заботится о твоем здоровье. Используй команду /setting для установки времени напоминаний.")
    reminder_thread = threading.Thread(target=send_reminders, args=(message.chat.id,))
    reminder_thread.start()

# Обработчик сообщений, содержащих команду '/setting'
@bot.message_handler(commands=['setting'])
def set_reminder_message(message):
    bot.reply_to(message, "Введите время напоминаний в формате HH:MM, разделяя запятыми (например, 07:00, 15:00, 23:00):")

@bot.message_handler(func=lambda message: message.text and len(message.text.split(':')) == 2)
def handle_time_input(message):
    try:
        reminders = message.text.split(',')
        reminders = [reminder.strip() for reminder in reminders]

        for reminder in reminders:
            datetime.datetime.strptime(reminder, "%H:%M")  # Проверка формата времени

        user_reminders[message.chat.id] = reminders
        bot.reply_to(message, f"Время напоминаний установлено: {', '.join(reminders)}")

    except ValueError:
        bot.reply_to(message, "Неверный формат времени. Введите время в формате HH:MM, разделяя запятыми (например, 07:00, 15:00, 23:00).")

# Обработчик сообщений, содержащих команду '/o_zdor'
@bot.message_handler(commands=['o_zdor'])
def o_zdor_message(message):
    list_oz = [
        "***Пусть пища будет твоим лекарством, и лекарство будет твоей пищей.***\n Гиппократ",
        "***Здоровье - это истинное богатство, а не куски золота и серебра.***\n Махатма Ганди",
        "***Доктор будущего не будет лечить человека с помощью лекарств, а будет предотвращать болезни с помощью диеты.***\n Томас Эдисон",
        "***Секрет здоровья ума и тела заключается в том, чтобы не скорбеть о прошлом, не беспокоиться о будущем и не предугадывать проблемы, а жить настоящим моментом мудро и добросовестно.***\n Будда",
        "***Одно неоспоримо: ничто в мире не стоит того, чтобы страдать из-за потери здоровья.***\n Вирджиния Вулф",
        "***Человек жертвует своим здоровьем, чтобы заработать деньги. Потом он жертвует деньгами, чтобы вернуть здоровье.***\n Далай-лама",
        "***Здоровье - это не все, но все без здоровья - ничто.***\n Генри Дэвид Торо",
        "***Ранняя ложка и ранний подъем делают человека здоровым, богатым и мудрым.***\n Бенджамин Франклин"
    ]
    random_oz = random.choice(list_oz)
    bot.reply_to(message, f"Высказывания знаменитых людей о здоровье\n {random_oz}")

# Обработчик сообщений, содержащих команду '/aforizm'
@bot.message_handler(commands=['aforizm'])
def aforizm_message(message):
    list_af = [
        "Драгоценный камень нельзя отполировать без трения. Также и человек не может стать успешным без достаточного количества трудных попыток.",
        "Если тебе плюют в спину — значит ты идешь впереди.",
        "Если в человеке естество затмит воспитанность, получится дикарь, а если воспитанность затмит естество, получится знаток писаний. Лишь тот, в ком естество и воспитанность пребывают в равновесии, может считаться достойным мужем.",
        "Как мы можем знать, что такое смерть, когда мы не знаем еще, что такое жизнь?",
        "Мудрый человек не делает другим того, чего он не желает, чтобы ему сделали.",
        "Не беспокойся о том, что тебя не знают. Беспокойся о том, достоин ли ты того, чтобы тебя знали.",
        "Не поговорить с человеком, который достоин разговора, значит потерять человека. А говорить с человеком, который разговора не достоин, — значит терять слова. Мудрый не теряет ни людей, ни слов.",
        "Порой мы видим многое, но не замечаем главного.",
        "Три пути ведут к знанию: путь размышления — это путь самый благородный, путь подражания — это путь самый лёгкий и путь опыта — это путь самый горький.",
        "Я не понимаю, как можно иметь дело с человеком, которому нельзя доверять? Если в повозке нет оси, как можно на ней ездить?",
        "Учитесь так, словно вы постоянно ощущаете нехватку своих знаний, и так, словно вы постоянно боитесь растерять свои знания.",
        "Когда, совершив ошибку, не исправил ее, это и называется совершить ошибку.",
        "Учение без размышления бесполезно, но и размышление без учения опасно.",
        "Не тот велик, кто никогда не падал, а тот велик — кто падал и вставал.",
        "Красота есть во всем, но не всем дано это видеть.",
        "Благородный человек предъявляет требования к себе, низкий человек предъявляет требования к другим.",
        "На самом деле, жизнь проста, но мы настойчиво её усложняем.",
        "Счастье — это когда тебя понимают, большое счастье — это когда тебя любят, настоящее счастье — это когда любишь ты.",
        "Давай наставления только тому, кто ищет знаний, обнаружив свое невежество.",
        "Если ты ненавидишь — значит тебя победили."
    ]
    random_af = random.choice(list_af)
    bot.reply_to(message, f"{random_af}\n Конфуций")

def send_reminders(chat_id):
    while True:
        now = datetime.datetime.now().strftime("%H:%M")
        if chat_id in user_reminders:
            for reminder in user_reminders[chat_id]:
                if now == reminder:
                    bot.send_message(chat_id, "Напоминание - прими лекарство.")
                    time.sleep(61)
        time.sleep(1)

bot.polling(none_stop=True)
